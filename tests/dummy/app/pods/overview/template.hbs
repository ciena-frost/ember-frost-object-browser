<div class='frost-modal-demo-notes'>
  <p>
    <b>ember-frost-object-browser</b> is a pattern that provides options for the user to be able to pass in
    components for the content areas within the pattern.
  </p>

  <p>
    The implementor provides the component for each slot using recommended
    Frost components.  This allows the full interface/features of each
    sub-component to be used and makes swapping sub-components simple.
  </p>

  <ul>
    <li>
      The 'filters' slot - <a href='https://github.com/ciena-frost/ember-frost-bunsen'>ember-frost-bunsen</a>
      is the recommended sub-component for usage as a filter form
    </li>
    <li>
      The 'content' slot - <a href='https://github.com/ciena-frost/ember-frost-list'>ember-frost-list</a>
      is the recommended component to display content.
      Paging and sort components can be passed to the frost-list component
    </li>
    <ul>
      <li>
        ember-frost-list provides a <b>frost-list-pagination</b> component that can be used for paging controls
      </li>
      <li>
        <a href='https://github.com/ciena-frost/ember-frost-sort'>ember-frost-sort</a> can be used
        for sorting controls
      </li>
    </ul>
    <li>
      The 'controls' slot  - <b>frost-action-bar</b> provides controls (button, link) that are coupled
      to the selection state. {{#link-to 'helpers'}}Helpers{{/link-to}} are provided to simplify setting up the
      state of the action buttons
    </li>
    <br>Refer to the documentation available in each of these projects for the appropriate usage.
  </ul>

  <p>
    The controller can implement the following callbacks:

    <ul>
      <li>onExpansionChange () {…}  <i>Optional for expandable items</i></li>
      <li>onFilteringChange (filters) {...}</li>
      <li>onPaginationChange (page) {…}  <i>Optional if pagination is used</i></li>
      <li>onSelectionChange (selectedItems) {…}</li>
      <li>onSortingChange (sortOrder) {…}</li>
    </ul>
  </p>

  <p>
    Required interface for toggling filter/facets section.

    <ul>
      <li><b>isFilterHiddenOnLoad</b>: Default to false. When it sets to true, filter section will be hidden on load.</li>
      <li><b>onFilterDisplay</b>: Callback called when expanding the filter section.</li>
      <li><b>onFilterHide</b>: Callback called when collapsing the filter section. </li>
    </ul>
  </p>
</div>
